%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: figure-2.pdf
%%Creator: (Adobe Acrobat 21.1.0)
%%For: woutervanrossem
%%CreationDate: 12/02/2021, 11:15
%%BoundingBox: 0 0 465 470
%%HiResBoundingBox: 0 0 465 470
%%CropBox: 0 0 465 470
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 572 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-06-20T17:19:36Z"
   xmp:ModifyDate="2020-06-20T17:19:36Z"
   pdf:Producer="macOS Version 10.15.5 (Build 19F101) Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -470 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 470 li
465 470 li
465 0 li
cp
clp
gsave
0 470 mo
465 470 li
465 0 li
0 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+LMRoman10-Bold Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /HAAAAA+LMRoman10-Bold def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 58 /colon putdup 73 /I putdup 82 /R putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 104 /h putdup 108 /l putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdef/FontBBox {-486 -295 1607 1133} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 0 444 453 655 676 686 697] def/BlueScale 0.04546 def/BlueFuzz 0 def/StdHW [47] def/StdVW [114] def/StemSnapH [33 36 39 40 41 43 47 48 55 62 96 156] def/StemSnapV [47 53 95 108 114 125 128 136 140 142 153 156] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings18 dict dup begin/colon <1C60D8A8C9B08A9560D4C2F3A74D92838E839CD10B5F2E89DEFFDE1AC7B613A4FD845CCA9FC62F87825C132DFC991C37EE277DB4A45132955C172F95186C5797B64B0868EC1CADE0DAFD3719564A> |-/I <1C60D8A8C9B08A95B62FEF2B15E3EFD000A4F3FD7D09E30BB19734E07ED31A6D5ACDE11DF3467F85838E49DB9901628EF63844F954EFE13EF90598D2CADB123A0310992590E0AEFB0B3B65EFFC4A6FC2EB5C428035> |-/R <1C60D8A8C9B08A953D52A85DD90B2050A3D0F71B344D41552D7C025890E8359288EAF34F58AD1E7EF849F4CAACFF53A90CBFB4366A31B8728139CC7A5501445BC56E60861FDF2B4141EA90D5054E7544CA80A1093D5C6E7574E6999E4A055281035AE99E33E80BBE6E0E857F8972050FA094503449687684647EAC48BD5EDDBA6EE86E9DE27C4ED63D85878A6E7EDDC8937693E10F51DD0EFF4A52429AA6F53151491BFF685C3B1DD082FD1D53B29D2F41562CA856083585591FF250DD5C58B4445F9E4A6ECA8B38C9280E0FA9C6E3C4A37BBB840536FF4170> |-/a <1C60D8A8C9B7ECD93D27CE2E7E981F8EB7B31757291F79D5D4A44F308DA9BCD4E549541D25B491924AAE275D2F8D6EB91EF4C18702BFE55D87575D9FC752D63A5823AB30E281FF70C4672FDA1C562F49FC1B365849FBC90BCA80A8F8D8B60816BB2E38BC9837BFD642B3DCC10941FBC1208BE5C85CE7BB2A78D5591CC525FC06B13F236A963971A923B81CDE105A601694FAEB7B63DF08BF18DE289B9C0FD88686F9F06601887CCB2CCA23FA816509> |-/c <1C60D8A8C9B08A95DBED6976208F60F2310390AAF124EAA4581F62E65B23AE8274B97F51ECF674A4EF8509E4DDC288AB9CD693708B6535071FDB7418D56AEC3D1B3BF1E60259935F4E4F2098AD6515E7FDCFC6D1B8BC0203DD6E16C9FF2F40DBA549FC9F64930351D027153ECD76AF2519C2B795705BEBF53A36198307D6AE1B45386484FE78867D6E1E6619B239838569B9B1> |-/d <1C60D8A8C9B08A95E5CBCB515510A1C181305FEA83C2C74DB8CA10E372EE5CE3CD1579D6C7C48340474F26CE327E76B91DE88B703CBB8EDADB28E6C268195502E5ED104A163A2AE2EA10B942062FF4F8DD5A3B5CD12C7DA72ABA06B90DC9804D90E261B84A47AA0E2E3B12B607E1ACA2786FE0B9C0316094BB2CD1368A9536C787BF03966B3DE6FB6B0FA5EF615FE650AEDF93A0CA3DFFEE6D186A2FC189A2555408C44757B3FBD9CB> |-/e <1C60D8A8C9B08A95D1DE8AA71D3914AC9DDC5BFDDE55301EE17DAE184B07B453F5305A5C2AE2B83408534DD083A2996D951195BDF9019D390FB7FBE801CFF989CBEA32D87F38D5CE6A607542F15D926B2809AF7FEFD16AB6C6EF92B95EE18169743E13C875B13849370F88B0A0AD35C7A73A856C2089D67E3FED77E5548FD77FB869F3C5B1D3D8F04A91569DE660E4> |-/f <1C60D8A8C9B08A95959BC16CF3058B0D4ABD3498863FF253A881F30906693ADCB9B29DBD92CF0317DEA3957DBB99ABEA27B7FC974333C07D3389293F265EFCD4794D8062ED7DE95F1841A91856809ABF175B9D7376DC278D55A9921101C2C3188B71FF49B1E86AFFA723C55623679A0A199A71290EB9DD0ED81FC4B426BD03> |-/h <1C60D8A8C9B08A95E5CBCB515510A1C1813129980C781B5428822CC41BA7B935A12B85B21C2735F7061BE3D74366C7D517877D29E3EFFEE3E3948F342DE83D24CC49309EAF6ABE700E934FC54D2D2F8A6D6C1F38BB18C05F039EDAABE377BEF6C689E49F21EEC8758EAA61D6D9AD5136CA1EA34A6CB014878A3DADCB206F0854FDDC04CC67A25C6AF4> |-/l <1C60D8A8C9B08A9560D4C2F3A74D92CE39CD89050C421F6EB031E320DA24BC81C6F30CB9856F0C6B934A6AFFACBC8CEF8E40E137595032C62A1B27B97B7A8A956472EAAADB01CA8D64DA> |-/n <1C60D8A8C9B08A95E5CBCB515510A1C1813104A39A25BB4CE1E88C643890D5753E2730B0B163ABD780B5CCD850E29D00CDA6159E00B179A5852EF6BA9BDA5B24E3072159F2C98FE27FB07E27174BB489F5FFC3CB45BBEFE098DF1EC6882969E31B6FAA9DEC04104B6E6F07B300EA457DCE1F6C8002529C4AF59C239DDE797E> |-/o <1C60D8A8C9B7FCB6A15C803B3B972EE31F5A721ABF9B8490D1BCABFAF5073D6D0835AA64493F9EC5B8BAE86BFF5C8028599ED438B3807899BF98EBBA4209565AD2999356129C7AD133835608851186E070877AA2D236DB854EE833ABDABFD0402809CEE60A468CBB0965> |-/p <1C60D8A8C9B08A95E5CBCB515510D2D321DB274F674D6D1EC605C7A73566700C592BF28C7CD91BE9D142DFEEC0FC23975786BD9310003B15D3C56C731C6DD0F9003BB59FE0DBE7BE84C6A13BD501FE72661158AC90DE9B1E82263F778D60D0888B0DEB362C17FEA91271050E2AFCE060DA36EC1469B4A37A0ED1E9D340C4B86A3A6999FA5F4CB6CC3FBF35F34B651882A239FF767C8312D5148AA694412A21D73E94D8D035DB559AD8569F0F00FE1C42A7DCAB62> |-/r <1C60D8A8C9B08A95A5BEE1199161DEEE160D633D6C14EB427DAE4DE6705E4C0DFD99838560CB0E37C82900303C95F5C66D559B67405D38D8AEEEAFA969A67666520D09A252D062C9AFC214E9552578CC8C98829FA409D75701043DD8A3C35D7FEEF9DD8CD7A14B6AC489407CACCB00C36409CF72AEA29BC0> |-/s <1C60D8A8C9B08A95AD02A60F56C9F20045DD480B06A02EE70DA0717965226528AC9EA1F8F60CDC596D96EB1754F4E51F1B96E06C90B0A396FD4606A44BD50E64D5F5FF1B0E1BB3ED129E8AD3BD25EC87AB1C3A0B8C1A2B61C21ABB4F049BF7A807376D4DC12F6FC897019A18E066E10205FA6487E7AE16F266877C892F48947B295671FE90924F3C7B2DDD8AC797F7E322FFB88153AA57C722154264CE93AACA16259D9C83A382280CE6E5D4C99F806AB012F3C5CF3E61F381B63DDB194D68B70E70> |-/t <1C60D8A8C9B08A95B289C730516FE0D4538DFB1DC5F19F4FF9332A253C9CABC6D9CFE85EDB6F3010623A2FEB261B0951B6C074AF8B94B774A31FE6DD61E22DF26DB13854D2D00A6F7C1F0F1BBCD5F11C7B0BA426E3859E7BE5565D7CB084A4FCB5871AEB658C0BEEBC71F88F1201AE96E0> |-/u <1C60D8A8C9B08A95E5CBCB515510AF055BEAA5A885D28AC031BB0439E47170BBB9EE2BE92BC2FA6C36D37755962EBD636A735907C06751CD6C575A3E45E4B2C978EB965DD523FD30159EADC50C7278A2FBC77B195C2AEDA6A77E2F0414F0FF755F33F0DBF4> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFB+LMRoman10-Bold /HAAAAA+LMRoman10-Bold findfont ct_VMDictPut/IIWUFB+LMRoman10-Bold*1 [58{/.notdef}rp /colon 14{/.notdef}rp /I 8{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h 3{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]IIWUFB+LMRoman10-Bold nfIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf13 11.953 mo(Input:)[4.34473 6.36717 6.36718 6.36717 4.45434 0 ]xsh%ADOBeginSubsetFont: IAAAAA+LMRoman10-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /IAAAAA+LMRoman10-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Normal) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 58 /colon putdup 65 /A putdup 67 /C putdup 68 /D putdup 71 /G putdup 84 /T putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdef/FontBBox {-430 -290 1417 1127} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/BlueScale 0.04546 def/BlueFuzz 0 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 23 25 26 28 30 31 38 40 42 45 106] def/StemSnapV [25 66 69 75 77 83 86 89 92 97 103 107] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings27 dict dup begin/comma <1C60D8A8C9B08A9570810981675918C548C5B3A95BB6039C753560AB1E0A047CF8D6886246D06F9E4D42D00828137BB838C36AECAFA703197FB51658AEAAF5C3A522FB34C6D4E38401A30904C2C1> |-/colon <1C60D8A8C9B08A9570810981675968F2C9119AD767573D3896DCDEF9DA5F5F8912E04C94872E9ED59B26AA7979866D70736E39162F6D45AC4E5BC3A424B2E5A438DB713C33C0D2FE26717D> |-/A <1C60D8A8C9B6E3FA234780E51B74F225B937BAFFF3CB7580FDF5CA2A239777EA3B14A22C671B85F447DCF1285098E022B10207F2DEBAD4A2D57A2F8383C73E1187077FADEB74F97088C3EE630760239F2EE457C2CDA93F4F3F85B9BCA6CC5E7A0BDD4A56D0CD01A6BADC519DC05F8A4A916C4DB1F257482B4C0E3DD0E1BE1826816EA154E8937E> |-/C <1C60D8A8C9B08A9454CA4C75C5C983901A105955FD02AB95A1D9A8A1EF865A83203F5CD934729651E4EEF2065B6F052BD3C895720BFDADC29E0200653994764F0A35400251D0319026A78D4B592303D35A812E4551FF2BF481C81C7165A3EEE56941ABAED25AFFDC6F09C8C7BE02D9E3C489D34A29FAA45A255CA06F8FCF62EDC9AD71129CDC73D2189DB5E49B87> |-/D <1C60D8A8C9B08A9464DE8546F88D2A05AE66A80CFAB072F6DD718524143D85929AB066455046A9A9273F6891DD0E163AFED74E7619F103923E5CA337EABDE337369F0B4B93D5AF9A2B25D3625F7355B42CEB76EC3B18FFA6A84BE653E26FDF733C5BE6C88F9B0F6372ECFCC2CA652CFA6946ACA8EC5A519675FFDA1EB761FAE853818B4B5475> |-/G <1C60D8A8C9B08A947C9C43F8E346BCC55FA2361E51F1223C2D7448FA40DC75A47FD93CC2BC1BB38D463F0686806AA6B0A590B487BA6C03090C335CE9968AA3FA710DCA8F816983323F6F27D455FA0ADD1E6BB2C7062E543718CD75F73D0C29C7A71713BE83F3F8CEFEBEAFC5466F77210D7B6E24BE7305B1D58423869029E5C1BFBC5AF130155EF3EEC809EC80633A9F79166FA2DB6F77E4E214DCAE9B8BBB82A97D4BFCCE310F3E4220E89AB967> |-/T <1C60D8A8C9B08A9454CA4C75C5C90F99C2BBE68CD072542DC3C37E4EE3DA2E3A63E34F4D54974A1B4BE0144B785E57B500610370AF2E87619C41EB8C3B8C76925837D2E0EA372AB5DA2F4D0972048395302854310C02B3ED80E3865D051A7548369ADA026EEF32A550577117B471FFE4F4F89D2EAA048A56D3B7A037D77915A28CC093AA43F47BA30FFABC> |-/a <1C60D8A8C9B7A73DCB03313BFF75C485D91CC5F498780C2BF1F5603CA6D42871F953159BB0D414396F6E266FE51B72CA20AF9A9F5F3A8F684D627908C3E3EBDF0B9C4D8F7CD287805BF88089186CF1C9688B56118396137BEF54282740A6072ABD988145FA761C8E92B43A24A19F72AA0B04E282E454CED8E32F4F99499A72DFBEA47D8CD033683EB2A72ECC8C11D436BD32A1C88F86652BCCC49C5C5E866CAE0328E43BF58124DF75F68541BC1A25C6077BE500EF44DD512B7C24CA7ED206DC> |-/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC563DEDE799FE18B66F38FD9D86FB3C655743BB3A4832C09C9BAAE4BE9BD5E2BD427FBB1CDEC30C6ABBA52A44B1696836349FE6433F42507BB9879A8F57F580BF51A77DBC3230A574D20880FD6083D6B3736906FED0E63306E20FC19C8BAC2282B3CFBAA96DC4C7> |-/d <1C60D8A8C9B08A95C5897169EED9664BED34F66AF82CA7619499AB5F3987B19E34B5B868CC7D438A09415E8D9FBE3B4490A1B9F0C2EBC6CD4FA119B17D5C3AEC64F847E9CD7FA4857A44B1F1E3880C069C4B84D1E0687927EE7B0CD06709656193BDBCB602B6153F8666D27DB2B8B2D8939A4E7943A2523EEF85C2BF1FF3A1AE20E41DAB734B4F98CDD1C2696BF138008A9E55678114C5CE0AAB8B6127096627CBCF3148FC5FA4F1C3B65A1980FC8B7BA9DE71D8E3FD6DD413C8B7> |-/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B20786BB8409E5CB08921DB905E2E41520D85900AB9D324FA6FBC4F2D711953BAFCA65E7289A259EBE0BC4D82C1B47A6402CD91672ADFB231F5DA7A19E7874DF952438CED363843A1C843A20036191748C68C39AEB079961D07A49A1FF6E8765BDD7C75B0BE65E9366D5A> |-/f <1C60D8A8C9B08A956BA65798425CE9B0A78F07A04AF2F8524751F181F94C493FBDCF450953F7CD7409C07628C7559F5EEF6E30A34D291CE7AB0C76AC2C6C5C7CC03EE9AF3B32A0CAF9A4E589E7A8508E24AEFAA3605D4E8E11C844596345CEE2ABA7ADDD99615B6B4644EEA8A824E756EB7D07EA8E7C7DD9D6469D7DA683F8ACDB28874EC3AA6567> |-/g <1C60D8A8C9B7A73DB916716F18E6A31B9B8891E09605BA20E9D84C1F6358C8D2E63BB9B4D4D7964034ADDD5273A0B7137519FFEF32C4F7A83B1DED0D38868245C70048C33D0514C78ECC9A4C2666012921CDCCC8F13082EE87EF1AC21BE5CB0CE5955A58BC857CFCAC5A902F4518FBF973F0E0C92604CFBF047D184653213DC74C56E2E62311D8D399DC18E50F5726B99E5F84DAA09545A443EA1C1DF99D9B36B5259BFF44DA200F3FDB7A3CE02ECD05DBFCB6CE4C117817681C84AA09C789FB200F60BC46F5E2751A8780E0B213C8104D51218BD420F0D931D21F4353C324AE834DBC40C2FA0F9588E6367EE1C2B7329C02703203CF0BADA528639B54C5E09D59F8A5733DC573601639C9DE70C2BFEEA7E1EE80C45EC8FF0B70CE7602BA1D248730C0422DBF80F2B2B04CE06CEBBB2D11F93280AA1E6F2B419D78B1E25D704381277182FBFB3D87DD7A65> |-/h <1C60D8A8C9B08A95C5897169EED9664BED359D179BDDBB0B44F84F3C8D99ADE99CF4BA2A0E7A85387BDE87EE816CBBA60ACE68F5CCBE6BF1DFB99314E21CA480606414AB62B26036FE44A0AD95BA1D1286D63296B6DC1A565BC04188F8A4153DAF94EBB40622931673FC733D1CD2AD2C0A34C487DE34989BB06421185A8FAD7B74D761B053AFB5961247A8B7B965DB10E710DB1FACD66FCD2FD44D43> |-/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EA17B456E1359D8F0E4FB2BE94D2A412D55DC3AC23210A76470D1BDB9846ED2586E78A25FDC43C4E6D2D72B417E39E8FF90D259BFF1017CCDBC81BF93FFB32B6EEC1ABC7ECCA5644AA3D47297BA2156537177AAA89A49B06D22B9F1E3083180F2D3D0> |-/k <1C60D8A8C9B08A95D222871B45C8170346D4B3692EE324314EC983995EC485E0F70C418C882D8C13EE36DB5BC630AA0964A147C880A861D0DD734CAB319B8CEC382945E8764A1E1B1B608D3A667B8263644D4403042F572031263253FD0C1127D6C3921B3F67BDF54ABBA8458E0C060695A29888BE422CB044507B475B0C55FFAEA48E4B4E4A603566E270CE42917D0E80F041178DEB6B0F8CE5C147E98F8220370CDD9DADC02C6E56BC226988B0CAE2A91704C5FC6D1965CDCFCC447ADE80BD854022B86E68CA79D23A> |-/l <1C60D8A8C9B08A9570810981675968AD25F317189905083B97CDBA187B49FA2DE8B4A07AD6680AF2BD4BB96B4AFEF0732D8922DEAFD5E1FBBF9E1205921A07E5DB2EC33CD386FF50CD6DC28C9099> |-/m <1C60D8A8C9B08A940B724A74A01E658BBE418701D6CC127704AD373524FD2AA70C817BEF1CB39B830813B42A76904C073F11EBAC25A9BEFAA402532C850072696A7636E42BDD64757D756DCE8578C5D51C4F0D2747622D3FD1971EDC2BBA61C3514A8426892DF2A253FDBB089B4E817D60988D7ADA1865A0F37660BB842B37C2C9265C2BB1859FA6DB73A65682D7618465ED4BFB8C41D5B2188D50FD6D2B8D533046068A0A763CF5813A959C81437C232FF9FD60831732A1C9F02C0F6F1FDF62C2D7307C6FAC1F50FCADA0613274CEF755F29F561FAC373DB265198A97E77082CD15BF> |-/n <1C60D8A8C9B08A95C5897169EED9664BED359D179BDCD49C0B1617088CBB4D1FACA7F47AED4D47529D948433033DE4BEE2EABB78F5F937D57735D248BCDBF67AB4C7F2C17B674B6378EEF2B651A0A73872C2B21A878D903AA2C63C9839046E31A4B52A34544B28E91F16640DB21303F3C82A38FBEDBA554005B85B5F23A62B661A4BD44C4B27AD4B0195DFA133A45781C9B97537D7762D523A20> |-/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4CDAF20027B900118209D5372F965F2045D50C02A29110A048C891D2806B60E2604FB10990120470D83354BBD4E7AA61CF4CB0843A58A2906EF0BF80D41CB21CA2886714324C5D4A14538AF26C64D07C26CEA631693B57606> |-/p <1C60D8A8C9B08A95C5897169EED915A4707A31F6977624ED001DDF119118D4A838A3D4F38BA1BDB73DE453E1B981E5C7304CBDEBAE65789F683483CD6B0A14513AC1ADD7DEAFA6E82690E109D029D8D4C0303ABE4C7837501EDAE5A3699196B514416B0E4DC4C21E8B086038DF981F56B234609EE80351EEC4271793AA6F894C50F93A46AC9B9855E7D577184E5D318DAB2B5281440B1F772670E3C2F008BCCB92E2EBEA64> |-/r <1C60D8A8C9B08A9584DCB847BA981150A65739287770BC1D01C8FC615470AC124D2A5D4233677903DA382AB62F712A92909234E2B82623255BDD6ABACDA20E8EFBE5065EA86F96632A14706CFF47F166E9AC1833E18F5C0C59D98758DE206F1DE9B9CFBB6D166B1534B9A51C47C076751DFE42D0AE800CA80AE5ADB12F4597B7D1B4AF914A0EB7> |-/s <1C60D8A8C9B08A9586D4F7B21AA9C8D0243EBCBAE701AECAC497723DABE0B0F62FFDC17CA5587D44E53851C5330C59A34AE6FCFBFDF85DAD478C5D82654336E0C44F98699482C767284493232B7AFC6EB11E45BB44E52DA0A697E679EB774CCB96B1E59692D5FCB167C05AB36602F1E320CB8175B86F2A8ECC297D18D94BD28AFCCC4CD131223E4852936C1FD69D5C8289391A0100B2AF6618CC8C924387F9B22D4FDE587E4B090169623DFAF6A7C256145C261A4276738E2B7EE25C0097BB4150E2BB43D6F5B3389EF34B2F31A3C5> |-/t <1C60D8A8C9B08A958B2129D6E9766AD6B324070E45EFF1FFDA59F3B2704898C63E0CDF83607B1B4C504FA427984C21847FEBF461FF1EDDC1E04012815574986376BEB5CBD5035209B766B3EAA724BADE1C68DADDB9DA089BD6EA8672B48426D8595998F332434381123E0DDF8CE613FCFEEBC2DA0799DE72B187CDDCC122BE2473A7> |-/u <1C60D8A8C9B08A95C5897169EED9664BED358197ECFDA0CCE502C7CEBC4B94673C9A98B007FF0F0E662BDCCC7C3BF9E3C7936B1C5A78E3B0936D02D3638B74B8EB2F0B26208B24F07EC4739B9AD2AC5D46EBB2B6E3F1E6CB75CE4ADEDB8C5383EA0B0CB1A1F92C7D631EB1F06B00458E6CC3542E8AF98982560E482E71F73A8631D8C2B1F43EB638EC5CD77776FF> |-/w <1C60D8A8C9B08A9454CA4C75C5C9631AA9824981898084EC0DC373243031E41139A94007FA166C4508435C5AE2CD53AF44F6BCE9B00AD1AA84ED878816A0067183DFC663FAE0E1CD5030B0E86E74D9212C4F13D74848F8F43E7A4A2C5C565AD8605049B33428014748092E36AD5AAC973520A55CD428B6763EF1DFC48B0983BFCA5CFFAFB9191C714BC1F03A5684CC2CBB362F03F5DA17C0A73E251B2EE22CB1635628281569B2C082E94577E350BE5FD9876137E60419E5F62B77ED0B77498ABA12959AE31FC4855BCD0D> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFC+LMRoman10-Regular /IAAAAA+LMRoman10-Regular findfont ct_VMDictPut/IIWUFC+LMRoman10-Regular*1 [44{/.notdef}rp /comma 13{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /D 2{/.notdef}rp /G 12{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w 136{/.notdef}rp]IIWUFC+LMRoman10-Regular nfIIWUFC+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 11.953 mo(ThesetsofCategories,Documents,CodeGroups,andDocGroups)[7.19499 5.53522 7.74593 3.93022 4.42838 3.87453 7.24776 4.98131 6.37209 7.19498 4.98131 3.87453 4.42838 4.98129 4.98131 3.90233 2.76761 4.42838 3.93021 6.08516 7.6105 5.26024 4.42838 5.53523 8.30176 4.41843 5.26622 3.87454 3.93021 6.08514 7.19501 5.26025 5.53522 4.42834 7.81772 3.90231 4.98132 5.53522 5.52527 3.93018 6.09515 4.98126 5.53522 8.85278 7.6105 5.26025 4.42838 7.81769 3.90234 4.98132 5.53516 5.53522 0 ]xsh%ADOBeginSubsetFont: JAAAAA+LMMathItalic10-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JAAAAA+LMMathItalic10-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Normal) def/ItalicAngle -14.0362 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 46 /period putdup 67 /C putdup 68 /D putdup 71 /G putdup 76 /L putdup 78 /N putdup 79 /O putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 105 /i putdup 107 /k putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 121 /y putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/BlueScale 0.04546 def/BlueFuzz 0 def/StdHW [22] def/StdVW [60] def/StemSnapH [22 23 25 28 31 40 42 58 72 73 88 89] def/StemSnapV [25 26 60 62 64 65 71 72 74 86 92 94] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings25 dict dup begin/comma <1C60D8A8C9B08A9570810981675918C548C5B3A95BB6039C753560AB1E0C66B07B884AE468C641938DE1B1A3F7135646B4FD9BD8C72D335B96B96E115DC1377C42DCB1917BC0D048CCB49575130CC22BC6D14FC74CD253113424> |-/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F6139DF6C45B8165ACC43B6E0B309859F778ABCF0> |-/C <1C60D8A8C9B08A9459ECFEBE82C8C264C80D1F005E6BEED37A0A5D59AE0DFBBF2D4BCF82982C388E3C32210626794DA2D39139309FE178DAD17A89E2FB253DA5EA9E70DDAA5C326A3D3D54318CCCD6FA6A9335103624C16D183747591A18821565C60D7B291C31C8BE817716DF3C7E6734FC3C8ED7D4DCDAB544F36AC5D615F8DDAC264A1400A179626EC762E83414DCCE61B0919BD54CB7EAD57ED158F4C688> |-/D <1C60D8A8C9B08A940DFCCE923E8E99B0DE594BB0556CF5A14B959B13F0D7A70A0E39E38B649863BDF2030CB90A94439FD80D6E0D3C1AEFAF29560CC908463570985683A4D885FE24A1B898484FD1F7E24E9C852106E767D6198039BDCE963D85742A5D03F93619B3B313EB5EC6A314162E118C623077546CFEB2340A56B52E8F032ADE155E184974B23C7FB077C235D7F01960394865E71686538BFBC3928A75F9AB181B59CB83607F> |-/G <1C60D8A8C9B08A947DC5B91E87B69019BDCC8AD76FAD667E0D6D02E7888EFAD4A3F07F7DB9D0EB62B4A115EAECB5F81D75A483E97A3ACFD243E2F17CC33D316D9C19978BBE5DA4F60336BF66E6A80F175700D35A75C9E465548EC8A259C3900AF23F93C55F7EFF1D315F1413E6F61A75CE37285437B05712AFE21035974986667096BC463CF647F1B477E05E0DDF863894236C89BAED5823FB34CAFE4053D8F0C06F885F422034ECC1919F1F6D286C8F82F8CB4BA892DDC672324E43509B613740726937F2A01A7FED178CA18B8A35790396471C0640F3EF3775EA63926D8F4BD39122A5E63A58B677EF2D> |-/L <1C60D8A8C9B08A94478101EE5603CAF9EA6B0CC0A80CE5382DEA6D381A4C431B558856FBDB137FA88C33375D97188A8343AB1A0D473B86898D88439C3377852DC889E39164D7B1FCCE8CED98AEB417D8D5C95B553C5ECD66E52EE2CB3307DF6C4F7216E04B31D2FBE604CEEB57167EC44176B22758637C92E6BEEF60F3DF5AB8848437D8C8408A4F4A7929A602A463D32089947190721F81A7E0E76F906A8A6663D2E883FCB8B1B0DB1474B429CA7148> |-/N <1C60D8A8C9B08A9477D6835054B882AAB4A02CC3C21B82D831EE80EDFB9F9E20D2E749A7BB717A373927821954C123212FEAAD3E23456D8DCC5F027A14E19964EF2F366798705304BD756A96F74FD78D2E84364C64451893BA1B3A773BFCE385236B93DB0775232D849A13BBD1091D93595BC0B74FD390056A87EF323E08B8122D7494E0298270299FDD96484BD05B6FB703E595108F22E8B54CD1043498ECD43009B5BC1120716D2C9F11BE7C56B671F9D95BDB7AF91FA95D987DC37FA2141A3CEA3BF70E963FF6EB607301D0AFC4F8EE11C80F82BB> |-/O <1C60D8A8C9B08A9467D0005CA8120FEB91AE340DD600A166D6F6A4096D19917AE1A6CCB66E0200D5F23EB9A5BD2CB5D40A56CBD2AE7CB7F398C70B9172DF4D71A057775178E2991F14A550D4FD11848C742D96808016BAB6F9A63C1BD5F9BDEFEA841FA3A42F6FD63F1739F8E602> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78CB8F13CD2764F64B9321FAFB9532FE40303B170B5C24EBA4E733E1003E485CEEDAE8F1639B06E95690BA9199112BA2B46C95D34A69D5CA5379E60F4963D7F3650918EE20E8CD560804204F1CEE35E575CF274FFCE693133BD08A099F0A28D901A3A7DF032220895B588E2D5DF5255C1CD9674B227E55845058713F2AA0BA6BD6ABA392C48CBD45461D4A3DD1C590C4C2AEA58855FE0AC24849340A3568A069076E245ED107EBF7B4F> |-/c <1C60D8A8C9B08A95B5AA7B9DB64BC1BCD29C945367C2D35F9DC1FB07D50ACA541D6A0E4E00DD7FC0B6D047AF4886FD993FE90332CF5AB0009D84439AA8DDF95AA7F306306D0EE4CBC01250AD516BC708A59BE96E1DFD6C6ED224D980346F3D211BB5D4876DFE2599CE55E5DDBF6F2B7FB77026CB389D256BB799B09E0E4D314B35> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688F88F9C0203B6B8E9D9C0AC006D0E8B4853E55AE6CE6D64DB74932B4B3824CCFA1FEE9004ADF6925AB28240A4F1F1EC3CF9945856B5CAEC64B6E2DBABB80C880BB8523770A0F3276E7260E465636F71740F5F52D01528479D252BF5C5A07D6BA34BDC52BE76A6D62FC28E9D5B723730A3C83CE0448FDADC63ACFAEF5EEC943DB9E2764C70E133EFD3C10BD708D19145385D3E20E070ED5338A0F33E67A108C93CDFABECCD2DA97767005332FC2EEFA70F3BE3628AB0BBA1> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781E2ED1B179FCC613BA252D4929B1C179AA048835A4D6B8CEE0C7CB80B4565A12DAB9AE81E8C3C8C511EA8815D71D25F7DE4E08EBC3EB7928190E20F61FD5F626420890F2E030888220D7E9A66C42C439432E56DD13C15CFB815DF7FAA6D50BBAD5F3F5F94E9608632> |-/g <1C60D8A8C9B08A95A6DFABA3A89D8009746F50F650362F7359CFEDBE8898B7B0527D7752FDFF449371FA9F4E740BE10628FA7DACF3123F97167539811B0DBEF9D9FBD3F8695B9AB8FF17A820E3D6BA52E212BBCFE78163EF78A2FB4855A57B44D00FFBB53C6AA9A108CB3F22091E6B435A5C93DCF75AB945FD5D6BE6E524B69924CAE773CA91F3766FB30427EA89D586730EE57B4D12F769C3BD82389BB184A9E79D811E81E00ED3E96834DDFE4CD6DDF65D33D7223399F7A0972685D91A77704D7C0ABA> |-/i <1C60D8A8C9B08A959A731E0C497E4A92ECA7E1F9E8F27B954159B7FC2E772C1C04A1469AC7888156E8C03752A95853E6C9BA93C493862D190F45DF141B0F1513900E192815649798CDBF737F624323EAF6A24A4072AC66884AB85E88C8AD887C9E8C9DE9D156A66E67DC9C2F5CCC0BD78256097DC1BC8638A6F729843800906E23C785B92BEA580C11C859AE26F8B1EF5B0B95E085F81D6CCCA521733B20F8CE548468FC77E1748D33EB65C05A9A4EDB41B0A854> |-/k <1C60D8A8C9B08A950870E36747CCD2F069BAB4078E293FC46118DBB0FF5021FD267E305A93EC325EB195678507FBAEAE7C74B2EC1BD1573B599E0DACEEE3EF1195470F36247BBE47F7E40022C90A861F3580547BA2F2A6D2B8F6CE45FE6300AD784811BEF5CA676688454F3905DF7C2768BE75F70E1BB52C69629EFBECA4A1774759EE4CA4C548F7FDC8F7231C59C2F5B86E127C2FCCE7EAB3A4982D18C5C8D53D3E2F09C71567B436153EDF6DD8185C21BB397E26085B3D3B3B4D5F7A272584DF95FE30D206FCDAC0A4CCAC0D76D9CCE978E6C2A53EA923637018B040C9DE6BF5F45541A6E3508C65D5F9155D2B0D2218D301D84C2A60D0904CD18F17CD609568472B4F32F5E07256AE6831> |-/m <1C60D8A8C9B5907D10A606D745C9CB74E6BB88A0F3A9F0EC5E2DD6F04F4384EC1CC31615192F6A13ED92B60A17DA58F16B228EBC00C4FC475762E44A425637C236CD20F964EE127E782280B2419D5E7C8E64CEA0A35A8E1989B90F6A28709165B917F8EFA52B9E1ACC2F4E08F0B0E2B1FBA120431544AA36CEBB2150405F7B60F4C7338EC6D47F2D6B08A30BF152DC8689BAF3E323E7915F4498DC9F899B102483E71EC18D4AB381EFA0F15570C204A949A54C3C97F8550CD4CF66191A8DBABBF4BBA2FECD6EA95EF724D5145DA5BA9CCE956B9BC184A4E0CE5A90B179CBB98794A1A50329240A619D828051B6C878C3ED6AB76BCBBC7075B00EB619FF4544297887255ADB8D0F3A4B1622E009A64B01BC8DBD9B7BC1EB9B3FC72FBBCF7EB80F7F7C> |-/n <1C60D8A8C9B08A95F6687F6AAD44491494489D5CC6393F3EC808D88CF1681B05598D16EC974BCBB8D2BF30AB2EEA36A0329C410643476FCFA21689A5DF736F35ECAFAFC798503C806E0D9029B6B4F3BE0F3C15D9FFFCC774358B0E58C675E9B684597F1C2705E58306633CFF846483E592093FACD8C35D78CE7A4E7EE2336E54DA8ED100AAAD722EAE11F32DE75B7AD98A99C5273739E882BC7243B934FB536BC9472264B1AC57B040270C790CD0548A9A56A7361CF00992E43D066A7241BA97C4595096E9C19279969B792896B94A44EED110D9B2339548BB4E6C8A> |-/o <1C60D8A8C9B08A95A1DD4CBC87944F1CBAD75D172C8DF605E2A5A9821B6A1E155E44F9561E9D8140C8B72B2C3048695E3B8D90EA6152F59965988C114A03805967BB612EC553471DE29CC4F77F6FE189AED7BE8112B4EE610E258495E5815E1B7CBC525C3EB765A4FBC0> |-/p <1C60D8A8C9B08A95D8561BC729D9D83C4DB87277A5CFD52598F6967EA474993C1CC60633275B7DF3D0A7E9F462FB004BEB773EE51C83C8F4996DA8E89AB597DF967F1828DC29E72E31FFCC4DAF2F54DBE96BC94D2759874E4861F3D3EA60AEEDD95378BC2564C94BB56B284006F3E56B1975BF3E8404872FEC9BB83B84C8FDD81FFFB2529251E9A1D0AE04A78B33955ED342EED60604DDA917F572C54010F19E3CCF04B7119EE8BC881748D4B8C1ABAAADCB034AABB35B0231A0B4103E6D801D7569F8B0D3D31E35F8ECCF256FBF6B3F9229EBCF057949D6D91812C80902C2159471E0A55332B2> |-/r <1C60D8A8C9B08A95AC58E8D2403E9FA15FD1CB8686CA65823082AD363E231E4E266E3D8F9D79BADA737310D6493F2B76954383A4F25190C800C66B4FF278EEA99F24FEE10F6AADF787E37E0623ADEBDD426645E12F86C9AC8008D16892EFC017764FB63F1C1D094EE07DBBB34B4FDEC20799D57C976634954BAFAA31E6827FE2E8C1A8951DB6B0C3177E719ACAA7513E68D825D6F2B70F3754B64A4433382E2A3BF314BB8BDF656F2F3159> |-/s <1C60D8A8C9B08A95AB8DC622FEBB6FA7ADE5B89A8F2A4908EC4665AA772DEA17E4469C83463B110B9EF15A01740BD172148F945E28FDC9277110714DCB9CD67F36AC144A32238330DB2ADEB097681155176FE989A9856A5084AE1041FD9A38CAADE75C5C76A73022A65C4F8357FD1935179AA95469239647E25756835B339C2EFE57EC9108E5315E0C84E8A7AB942C3B02237DEB17276D5BC27CEF28> |-/t <1C60D8A8C9B08A9591900960B3FA4DFCC78A2656C8FE6BD789515026DB6089F64F57FE6D470660A453F7DEAB43D67A97952539BDB36D9E0C5DCDF7AE28DD150F4D2359DF9CF061A58788C24D6F431064F1860B65A26B8A5031CE9727FE01EEDCF525E163DCFC777069639F21E421256CBB499E7CE089878339F64F5EC28AAD29D4CBF1224096AC7C21CB> |-/u <1C60D8A8C9B08A95C36E4BF20596AFCFF530436408BF305EEA9742C26FC6E638E48A0D306F9522E6FF090B5E9FE31223EFC81D76064CCEC3A113FDFA5C415EBE291C1FCAE0508B3CDA471ADA22F56BA79B900E3B74CE4A5662583C11D8AE9193EE92CC3CA3EC33DBB34FA77CD8B5394DC5DE3B2CB288F1888A0F541D270453F614C88D215392911D17DEC06083550290A8C1B99ABB511077194077A75FC6525938AE008BB916E799826B1FE53CDC0318ACFAC760BE5254E8BD1ED9E40B911F7C21EAD76D902835616D95ECD401351ED448> |-/y <1C60D8A8C9B08A95A3A690DEE11C2ACFF7AB09F29D6398F8F5F191B884CDC16CFFB2A25ED7A1A5EF0DBDFA3AA69EA878EBB78718F38DF116D4CA2240331171A573232AACFB701EE329410F729AE477CD60167BAD3E8732C99C9F692B415DB375A67447BE3CD4F148AE8811F45C884F4AD5C62396846ECE5CA15C4EDFC936B18F6C628FDA68BF9B023179E9C4E92FF46A73742E8837C6CBA48A8F436235EF34524DBE6C0400E36B404175BF5D6CED232857E65BFFDEEA76A35D3E98D32ACDF979252B65355304892798134933F1FE6B47648422209569D466DE> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFD+LMMathItalic10-Regular /JAAAAA+LMMathItalic10-Regular findfont ct_VMDictPut/IIWUFD+LMMathItalic10-Regular*1 [44{/.notdef}rp /comma /.notdef /period 20{/.notdef}rp /C /D 2{/.notdef}rp /G 4{/.notdef}rp /L /.notdef /N /O 17{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i /.notdef /k /.notdef /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]IIWUFD+LMMathItalic10-Regular nfIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 23.908 mo(Categories)[7.83754 5.2673 3.59344 4.63962 5.09792 4.82887 4.76913 3.43413 4.63962 0 ]xsh%ADOBeginSubsetFont: KAAAAA+LMRoman10-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KAAAAA+LMRoman10-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Normal) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdup 58 /colon putdup 61 /equal putdef/FontBBox {-430 -290 1417 1127} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/BlueScale 0.04546 def/BlueFuzz 0 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 23 25 26 28 30 31 38 40 42 45 106] def/StemSnapV [25 66 69 75 77 83 86 89 92 97 103 107] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E97611D7A43B27FB969D53C0747658E493E7AA359A802207A1991C3D8B9087EF377BC8C1D31DE5D4203DEDD32E3BD94BEF65634703C26DFA7327A451D6119A7D1631C0F333CE7CED323FF240220E5EFB9488C5D7D487C7270B581791A39C43D9E3B23C79> |-/parenright <1C60D8A8C9B08A958B2129D6E97611D7A43B27FB969D4ABFFE08AAA0B6A3A78296556F7549D2E5833E949BC141ADCBD1E88C5ABC5E1596654EFC9E2B7DFDBF97CFA18CEA390FBD1EFB6ABEBBF2A19A48225297D198BEBE417DA81D8A7AF682F393617DAF0ECC6321B73D42BA9DD411> |-/colon <1C60D8A8C9B08A9570810981675968F2C9119AD767573D3896DCDEF9DA5F5F8912E04C94872E9ED59B26AA7979866D70736E39162F6D45AC4E5BC3A424B2E5A438DB713C33C0D2FE26717D> |-/equal <1C60D8A8C9B08A946182837629008D945C50B3BD77B79680F3B07BFC081453BE979D2BF14B0546A289C3DB8B032F9F718CED8F4A8203617A49C83F57FDA17B998FD78E04BCECFD67ED1CEA48F4335CE2A9A8378E3D927724A1> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFE+LMRoman10-Regular /KAAAAA+LMRoman10-Regular findfont ct_VMDictPut/IIWUFE+LMRoman10-Regular*1 [40{/.notdef}rp /parenleft /parenright 16{/.notdef}rp /colon 2{/.notdef}rp /equal 194{/.notdef}rp]IIWUFE+LMRoman10-Regular nfIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf98.953 23.908 mo(=)sh%ADOBeginSubsetFont: LAAAAA+LMMathSymbols10-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LAAAAA+LMMathSymbols10-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Normal) def/ItalicAngle -14.0362 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 123 /braceleft putdup 125 /braceright putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-10 0 40 45 683 711 750 772] def/BlueScale 0.03572 def/BlueFuzz 0 def/StdHW [40] def/StdVW [40] def/StemSnapH [22 25 31 40 43 45 55 56 62 65 67 92] def/StemSnapV [22 25 28 36 40 44 56 67 81 83 85 770] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/braceleft <1C60D8A8C9B7A73DB595D344008DDC1121A6C742E88B7D5EAFF86F1A08AFCE0F4FA89C2170904E557065DBBC536098DA4114BFADECB6E17F823375283F28E605FBC45A3581B0B4849DD2C8D92CE0D13F7C3545D475A666835544156920D95E89FD3D8571BFCB4B39546C486FAB026EE85EF7E569F9D7CC9D095BFCF08997F216D045A945E549B76C695030F34CE73A21FB4ADC26D1A214ED6FA002AE5D6A81C429ACC1097F0F61A5EACE49> |-/braceright <1C60D8A8C9B7A73DB595D3440094520303C3D570FD32236229CA7D2BBEDCB3BCD1336D432F0E9A98056D94A033B9084F4F845EC4C529B04E255363C06CDAA1686C5F40647B29D8711D349F804AEBE1FD3F906F5ED474CC34CD9ADBF8FFA39FB97CD06DFD1C1592D7C29DCC16CA65B4947A82C65BFCF06895CEE4E8E73C50E4AAFCB510E774D64E5C6C6783B02FB4D61C6460A5D1AA4313FCA5A0ABA6CDA50DA98104A3E1C2A66F3DC6A585> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFF+LMMathSymbols10-Regular /LAAAAA+LMMathSymbols10-Regular findfont ct_VMDictPut/IIWUFF+LMMathSymbols10-Regular*1 [123{/.notdef}rp /braceleft /.notdef /braceright 130{/.notdef}rp]IIWUFF+LMMathSymbols10-Regular nfIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf109.469 23.908 mo({)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf114.451 23.908 mo(cat)[4.3118 5.2683 0 ]xsh%ADOBeginSubsetFont: MAAAAA+LMRoman7-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MAAAAA+LMRoman7-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Normal) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdup 50 /two putdef/FontBBox {-483 -292 1562 1124} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 446 664 674 683 703] def/BlueScale 0.04546 def/BlueFuzz 0 def/StdHW [36] def/StdVW [79] def/StemSnapH [26 28 30 32 33 36 38 45 47 54 86 115] def/StemSnapV [28 34 36 75 79 80 84 91 95 103 107 114] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/one <1C60D8A8C9B08A95C25148D4A67F9511413D3569D108C4E0A2E270AEC05C3F071B0F9D85472A61FC4B6AC5DF81872DF2366F27D9C12B56660CF62DBC0622E563DAEC5CAA03BEA87DC640ABDFF14D8C4D7F23F6A25F6300C969FC43B7711E6F72> |-/two <1C60D8A8C9B08A95C25148D4A67F955E56DED8709BEAC975B0F2E8A325E14940D59918FF4A76C38418793E94EDFB940FBA79ADA7644EEB0B54103A6F23007F850D8699DEA48B38AAE0EF099ED27D3440906579AFA669116ACA8C79B94B9292765691FBBE5D26B9CE39F04CEF6DB2F5588E9841C95FC62404C90BD90EF52944F1D5A53187AFD0CEDF4530> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFG+LMRoman7-Regular /MAAAAA+LMRoman7-Regular findfont ct_VMDictPut/IIWUFG+LMRoman7-Regular*1 [49{/.notdef}rp /one /two 205{/.notdef}rp]IIWUFG+LMRoman7-Regular nfIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf127.626 25.403 mo(1)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf132.095 23.908 mo(,cat)[4.43137 4.3118 5.2683 0 ]xshIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf149.698 25.403 mo(2)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf154.167 23.908 mo(,...,cat)[4.43137 2.76761 2.76761 2.76761 4.4214 4.3118 5.2683 0 ]xsh%ADOBeginSubsetFont: NAAAAA+LMMathItalic7-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NAAAAA+LMMathItalic7-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Normal) def/ItalicAngle -14.0362 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdef/FontBBox {-1 -250 1171 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 431 441 451 463 683 703] def/BlueScale 0.04546 def/BlueFuzz 0 def/StdHW [28] def/StdVW [72] def/StemSnapH [28 29 32 33 36 48 49 54 67 74 80 92] def/StemSnapV [34 36 38 71 72 73 74 75 81 83 96 97] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/m <1C60D8A8C9B08A94C50FED40EB3D671D5F971A14CED4D201748A8E72BD8DD6E7E1C50C0CD27BDD519529DC93FB3335B57A1F0FDABB5D516164FA527D6C8709A50543F14FBEB3F233A37CC3B567E771B0BAB727C83AA188169F3E8337347408BF8472CD9BD7A585BBA1A3C6F8D16E3070ECEF10FBB70F65B33C9106D5172739590A7259F2C5FD2C23019D6C756733B4A7F27BDB3C66A939B780D8B79C3427EC00993EEB2E211047C620AD7BECF5CFA17ADBB0BF51822302E4E49DC013CF8D01761498DB9881270B9F823BAB31D6B365DCEC77A428387A93CBCBDA48B6B5A00E4C6A4626CBE030DA509E5B248A604B6B820AEEC58B375F1AE5A31F9CE48B69928BA87E54DB1D413AD05B33A181376EE5B61AB73D68FC83FFDDEC35AEE9B2375856F348576D6C29EC999C754CA759185CDD6356244669896829C80758> |-/n <1C60D8A8C9B08A945DCD93A6413263FE38546F0BE7E2F98E1145B7983B956426F0913FC6DB777DF68FC3D6D8AFB94BE64C7FFB489BBC50CA239F23D1494ACAB050945FE76841968C28397872728856DF65EA0CCEF61BCBDF013E5C084DCBA968F0A48DBA8142BD6CFA21E568E57BCF7D1BAB742FC29BBA8D02CE42DABC4013967FB3445BF1781474B7F08059BBB43E5529B04EB35D091BF2B4E57641624FCD1A60A1B35F3B4D7F5FEE250FBBD7747B3AD95182392053FB236818051BB87B19CCE46FFD323C6587CF823E3553D74BDD9B5BE6976D589850660F682D7C1F3BC47EEBB7> |-/o <1C60D8A8C9B08A95C0C01B05FCC16A74DD7AD0A823FAE1F437DDA92D11ED8006BC813E337064CD39B555C7B17BA852061E42F503C17DEA834063CF0DF21ACC43618C849F9435325A18A4F136FF486BDEB9FD920BA132D9709BA2608548F7306F6A28588FFEA7196CD86D3F> |-/p <1C60D8A8C9B08A95FA42B93E17DC632A470E3B3D3B89243A44B2262AAA9CA18A69BA42AC29C28ED2712A12C82E2CE0443C5FFF50B98797EE966254F67B0A9B837ACB0386E0018D7C6142FF8CDD79D21A93ED1CC4A6084694E82167999416BA5E18C8688693DFB174D8913E9F32ACEE965D73D8E335D53B7A0C9CBFFC4C143AA63D35755BFE5811352BFADE5A0C46104D835DE73F73494939A51BD75F44D5C57A22091E9229AECACEE58ED056A04F8C0EFE0945E30B35259DCD14AA6C00C0D5AD0F2F8139562A85C1CFF1FCA813AFB92BA22D9ACC795457BA09D8C8C924CA768C13> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFH+LMMathItalic7-Regular /NAAAAA+LMMathItalic7-Regular findfont ct_VMDictPut/IIWUFH+LMMathItalic7-Regular*1 [109{/.notdef}rp /m /n /o /p 143{/.notdef}rp]IIWUFH+LMMathItalic7-Regular nfIIWUFH+LMMathItalic7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf184.5 25.403 mo(n)shIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf189.923 23.908 mo(})shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 35.863 mo(Documents)[8.52702 4.82888 4.3118 5.70366 8.74722 4.63861 5.97961 3.59741 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf101.169 35.863 mo(=)shIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf111.685 35.863 mo({)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf116.666 35.863 mo(doc)[5.18558 4.82689 0 ]xshIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf130.992 37.358 mo(1)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf135.461 35.863 mo(,doc)[4.43137 5.18857 4.82986 0 ]xshIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf154.215 37.358 mo(2)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf158.684 35.863 mo(,...,doc)[4.43137 2.76761 2.76761 2.76761 4.4214 5.18857 4.82986 0 ]xshIIWUFH+LMMathItalic7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf190.168 37.358 mo(m)shIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf197.736 35.863 mo(})shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 47.819 mo(CodeGroups)[7.83754 4.82888 5.18757 4.63962 7.83752 4.75919 4.82887 5.70564 5.00826 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf105.472 47.819 mo(=)shIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf115.988 47.819 mo({)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf120.97 47.819 mo(codeGroup)[4.3118 4.82988 5.18857 4.64061 7.83853 4.77013 4.82988 5.70663 0 ]xshIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf168.084 49.313 mo(1)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf172.553 47.819 mo(,codeGroup)[4.43137 4.3118 4.82988 5.18855 4.64063 7.82857 4.76016 4.82986 5.70667 0 ]xshIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf224.095 49.313 mo(2)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf228.564 47.819 mo(,...,codeGroup)[4.43137 2.76761 2.76761 2.76761 4.42142 4.31177 4.8299 5.18857 4.64059 7.82858 4.77011 4.8299 5.70663 0 ]xshIIWUFH+LMMathItalic7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf292.836 49.313 mo(o)shIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf297.267 47.819 mo(})shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 59.774 mo(DocGroups)[8.52702 4.83087 4.3128 7.82956 4.76117 4.83087 5.70763 5.01025 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf100.651 59.774 mo(=)shIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf111.167 59.774 mo({)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf116.149 59.774 mo(docGroup)[5.18558 4.82689 4.30881 7.83554 4.7771 4.82689 5.70366 0 ]xshIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf158.624 61.268 mo(1)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf163.093 59.774 mo(,docGroup)[4.43137 5.18857 4.82986 4.3118 7.82857 4.76018 4.82988 5.70663 0 ]xshIIWUFG+LMRoman7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf209.996 61.268 mo(2)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf214.465 59.774 mo(,...,docGroup)[4.43137 2.76761 2.76761 2.76761 4.42142 5.18854 4.8299 4.3118 7.82855 4.77014 4.82986 5.70667 0 ]xshIIWUFH+LMMathItalic7-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf274.099 61.268 mo(p)shIIWUFF+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf278.704 59.774 mo(})shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf13 71.729 mo(Input:)[4.34473 6.36717 6.36718 6.36717 4.45434 0 ]xshIIWUFC+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 71.729 mo(Themappingsofcategoriestodocuments,ofcategoriestocodegroups,andofdocumentsto)[7.19499 5.53522 7.74593 8.30176 4.98131 5.53522 5.53522 2.76761 5.53522 4.98129 7.24777 4.98129 6.37207 4.42838 4.98131 3.87453 4.42838 4.98129 4.98131 3.90233 2.75766 4.42838 7.25772 3.87453 8.29884 5.53523 5.26024 4.42838 5.53525 8.30173 4.42838 5.25629 3.87451 3.93024 6.08514 4.98129 6.36209 4.42841 4.98129 3.87454 4.42838 4.98129 4.98132 3.90231 2.76761 4.42838 7.24777 3.87451 8.30884 4.42834 5.26025 5.53522 7.74591 4.98132 3.90234 4.98132 5.53516 5.53522 3.93024 6.08514 4.98126 5.53522 8.85278 4.98132 6.36206 5.53522 5.26025 4.42841 5.53522 8.30176 4.42841 5.25623 3.87457 7.25769 3.87451 0 ]xsh47.399 83.684 mo(documentgroups)[5.53522 5.26025 4.42838 5.53522 8.30176 4.42839 5.25626 7.19208 4.98129 3.90234 4.98129 5.53522 5.53522 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 95.639 mo(Occurrence)[7.87843 4.31181 4.3118 5.70663 4.76018 4.77013 4.64063 5.97562 4.3118 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf101.48 95.639 mo(:\()[5.53722 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf110.889 95.639 mo(category)[4.3118 5.2683 3.59444 4.64061 5.10887 4.82986 4.77014 0 ]xsh%ADOBeginSubsetFont: OAAAAA+LMMathSymbols10-Regular Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /OAAAAA+LMMathSymbols10-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Normal) def/ItalicAngle -14.0362 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /mapsto putdup 33 /arrowright putdup 34 /arrowleft putdup 35 /minus putdup 36 /union putdup 37 /emptyset putdup 38 /element putdup 127 /reflexsubset putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-10 0 40 45 683 711 750 772] def/BlueScale 0.03572 def/BlueFuzz 0 def/StdHW [40] def/StdVW [40] def/StemSnapH [22 25 31 40 43 45 55 56 62 65 67 92] def/StemSnapV [22 25 28 36 40 44 56 67 81 83 85 770] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings9 dict dup begin/mapsto <1C60D8A8C9C4A6CECE728EE33C0B73BED77841A54AF1B9C70922630F0F4981AC9CAD546F2BD8B5EFBE1242BFDFBB893CD4147242DD6282644E7FB20AC6CD0CAABC> |-/arrowright <1C60D8A8C9B5EE316F63F16F05840C794579913DF6EE3CD171AD036DADC35E1E2BA80F42C2EE6CEABE3AE0658B9666170201E6086D1B512EA2E47D5AEC9E2C05A905B9555F6C5464B783227AD2EC8F2A8F85354E5C499FCF727F55D9369BD8FF54D60D0AA918735ADD018A8F97EF32D3D2C88F2397EFB55AD0> |-/arrowleft <1C60D8A8C9B5EE316F63F16F05840C794579913DF6EE3CD171AD036DADC35E000E21741AE4ADC6AA01A863F8AAC7FAE68D212AD5B541FCF6EF9B93A6C81F988FE7BE5D96F16BB8A612665ACD71A60491A73F55B9B3E49C6C25019B8885E1FCE928FB0953C1DF5F497CF9C490AA3B684EADEA55B7C1C273876A> |-/minus <1C60D8A8C9B08A946182837629008DF77029A2478D0316F5CDDAB16A82B74000B6F3006BA10D289F3F35D30EF9D36B1027B1EC> |-/union <1C60D8A8C9B08A944AAF3A41AE50C6DB0FB27D87F667F34639D4AC21098BE8F213C4F92CF3425805DA42DD568E1EE893311BAE9CD3943486471EDD981575FA9A9B70E2BFF0484BF2DAC32869E2D5D2C24F6DD3490FA4C39836AC0498B1907276FD> |-/emptyset <1C60D8A8C9B7A73D3B2D329BBCE5B570651F55BD0333F8A53997D0BA51CDD4691FD41C0C00D8865138340EB651B664742F4E6BFE10191AAE4A487E216BE32A726C98836574371D75475EB6A6A867F3DC3D846F90EF578F50D87C24803960051B1D8CD0A2BAC8DE76E0CF3298456C8BE85AE9281A2217A659C84CA4ADFCE8ACA43AB3A1C5DC689ADE154969781C23C4EC41C57DDEF7B6C78486473058010D5AD78326F72A3A2D3859F79493567C89F4E8947EC344013632E5DEA78BC0D502000CCD18EBDF6F576ABD44B4657642A6F32DD49CC738> |-/element <1C60D8A8C9B08A944AAF3A41AE50D0CBD86C3E8E3BE9895745426E4986ED9480BEFD8F82A9BC60249C8B1057759C365AE404A134EB252FC33F69CEB57BE781829C3694EE2A774FA1560987FEA32E9BA5898F5653D5BBBF03844139110BFAB6061B1B3DA475CCA0B25B2FCB87AE69907331C1EC617EB60A> |-/reflexsubset <1C60D8A8C9B08A9461828376290081FDEE89FFD92D5A03D06C4AE30FA09A126BA5E90408468844ED86344A60B03DB54463AAC0D07BD2A57148709D78F5D0B813C16D1D19AE39BB9BF9728A9437FFC542A7FC8A006E5565CBD76C76D326F24F164108DF6F896A1407A691A7A1FC6B3A84AF7CD45B115CE55E74355815B5EC7ACBEE9D9113> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFI+LMMathSymbols10-Regular /OAAAAA+LMMathSymbols10-Regular findfont ct_VMDictPut/IIWUFI+LMMathSymbols10-Regular*1 [32{/.notdef}rp /mapsto /arrowright /arrowleft /minus /union /emptyset /element 88{/.notdef}rp /reflexsubset 128{/.notdef}rp]IIWUFI+LMMathSymbols10-Regular nfIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf151.423 95.639 mo(\177)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf161.939 95.639 mo(Categories)[7.83754 5.26729 3.59344 4.63962 5.09792 4.82887 4.76913 3.43411 4.63962 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf210.725 95.639 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf217.367 95.639 mo( !)[0 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf230.097 95.639 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf233.972 95.639 mo(document)[5.18558 4.82889 4.3118 5.70364 8.74722 4.63861 5.97961 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf279.732 95.639 mo(\177)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf290.248 95.639 mo(Document)[8.52701 4.82889 4.3118 5.70364 8.74722 4.63864 5.97961 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf336.58 95.639 mo(\))shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 107.595 mo(CodeGroup)[7.83754 4.82888 5.18757 4.63962 7.83752 4.75919 4.82887 5.70564 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf100.802 107.595 mo(:\()[5.53722 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf110.211 107.595 mo(category)[4.3118 5.2683 3.59444 4.64061 5.10887 4.82986 4.77014 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf150.744 107.595 mo(\177)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf161.261 107.595 mo(Categories)[7.83754 5.25734 3.60339 4.63962 5.09792 4.82887 4.76912 3.43414 4.63962 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf210.047 107.595 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf216.689 107.595 mo( !)[0 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf229.419 107.595 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf233.294 107.595 mo(codeGroup)[4.3118 4.82986 5.18857 4.64063 7.83853 4.77014 4.82986 5.70663 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf283.175 107.595 mo(\177)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf293.691 107.595 mo(CodeGroups)[7.83755 4.82886 5.18756 4.63962 7.83755 4.75916 4.82889 5.70563 5.00827 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf348.997 107.595 mo(\))shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf47.399 119.55 mo(DocGroup)[8.52702 4.83087 4.3128 7.82956 4.76117 4.83087 5.70763 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf95.981 119.55 mo(:\()[5.53722 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf105.39 119.55 mo(doc)[5.18558 4.82689 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf122.483 119.55 mo(\177)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf133 119.55 mo(Documents)[8.52702 4.82887 4.3118 5.70366 8.74721 4.63863 5.97961 3.59743 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf184.002 119.55 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf190.644 119.55 mo( !)[0 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf203.374 119.55 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf207.248 119.55 mo(docGroup)[5.18558 4.82687 4.30881 7.83554 4.77713 4.82687 5.70364 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf252.491 119.55 mo(\177)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf263.007 119.55 mo(DocGroups)[8.52701 4.83087 4.31281 7.82956 4.76117 4.83087 5.70764 5.01022 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf313.492 119.55 mo(\))shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf13 135.794 mo(Result:)[8.5928 5.2552 4.51799 6.36119 3.18305 4.45833 0 ]xshIIWUFC+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf52.977 135.794 mo(Adirectedgraph:)[10.7895 5.53522 2.76761 3.90233 4.42838 4.42838 3.87454 4.42838 8.85277 4.98129 3.90233 4.98131 5.53522 5.53522 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf134.117 135.794 mo(G)shIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf144.717 135.794 mo(=\()[10.5185 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf159.108 135.794 mo(Nodes,Links)[9.09081 4.82689 5.18558 4.63762 4.66742 4.42838 6.77956 3.43213 5.9826 5.49432 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf218.313 135.794 mo(\))shIIWUFC+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf225.508 135.794 mo(withelementsasnodes,anddirectandindirectlinks)[7.19498 2.76761 3.87454 8.85275 4.42841 2.76758 4.42841 8.30176 4.42838 5.25626 3.87454 7.25772 4.98129 7.24777 5.53522 5.26025 5.53522 4.4184 3.93024 6.09512 4.98129 5.53522 8.85278 5.53522 2.76758 3.90234 4.42838 4.42838 7.19208 4.98129 5.53522 8.85275 2.76761 5.53522 5.53522 2.76761 3.90234 4.42834 4.42841 7.19208 2.76758 2.76761 5.53522 5.25827 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf13 152.039 mo(Nodes)[9.09081 4.82688 5.18558 4.63763 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf44.182 152.039 mo("#)[8.29884 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf63 152.039 mo(Codes)[7.83754 4.82887 5.18758 4.63962 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf92.37 152.039 mo($)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf101.226 152.039 mo(Documents)[8.52702 4.82887 4.3118 5.70366 8.74722 4.63861 5.97961 3.59741 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf154.442 152.039 mo($)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf163.298 152.039 mo(CodeGroups)[7.83754 4.82887 5.18758 4.63962 7.83752 4.75917 4.82889 5.70563 5.00827 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf220.818 152.039 mo($)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf229.673 152.039 mo(DocGroups)[8.52701 4.83087 4.31281 7.82956 4.77112 4.83087 5.69769 5.0202 0 ]xsh13 163.994 mo(Links)[6.78054 3.43313 5.9836 5.50529 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf42.13 163.994 mo("#%)[8.29884 10.5205 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf13 180.239 mo(fore)sh32.1988 180.239 mo(ach)[5.56915 4.7731 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf52.267 180.239 mo(category)[4.3118 5.2683 3.59443 4.64062 5.10887 4.82986 4.77014 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf92.8 180.239 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf102.209 180.239 mo(Categories)[7.83754 5.2673 3.59343 4.63962 5.09792 4.82887 4.76913 3.43413 4.63962 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf154.316 180.239 mo(do)[6.36517 0 ]xsh.398 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
18.181 253.763 mo
18.181 183.825 li
@
%ADOBeginSubsetFont: PAAAAA+LMRoman7-Bold Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /PAAAAA+LMRoman7-Bold def/FontInfo 7 dict dup begin/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdef/FontBBox {-544 -304 1774 1146} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-12 0 444 453 656 674 686 698] def/BlueScale 0.04546 def/BlueFuzz 0 def/StdHW [56] def/StdVW [139] def/StemSnapH [42 46 51 53 56 62 64 72 73 88 147 163] def/StemSnapV [63 71 72 98 102 120 127 139 148 151 163 164] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/one <1C60D8A8C9B08A95E08049111C98D6A1B7CB27CB2C06FA973F0133464EA0F47AF40F0067B6FCC2D50730F3925205B26CC8A460343D21129B7E1D15076DD27A297BD1B52FC14DE808711E8FC43A121BE12DCEC64399A8A8B422C75871BB6074> |-/.notdef <1C60D8A8C9B8524C50> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IIWUFJ+LMRoman7-Bold /PAAAAA+LMRoman7-Bold findfont ct_VMDictPut/IIWUFJ+LMRoman7-Bold*1 [49{/.notdef}rp /one 206{/.notdef}rp]IIWUFJ+LMRoman7-Bold nfIIWUFJ+LMRoman7-Bold*1 [6.9738 0 0 -6.9738 0 0 ]msf3.904 192.194 mo(1)sh%ADOBeginSubsetFont: HAAAAA+LMRoman10-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.systemdict beginIIWUFB+LMRoman10-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/i <1C60D8A8C9B08A9560D4C2F3A74D92CE39CCD31B312A30E7FFA33A27C3DCF00AE7253D64E67886EBF6EB1E705A7BCA999B542F162E0B71559240A8346E5C086BAD6C68EBB348D2C330DC2212A1C9C079112312C3B0F051BD12857E0912AE52D19B1A6AA6178F999746F294773E9C> |-systemdict /gcheck known {setglobal} if end {end} ifendIIWUFB+LMRoman10-Bold /Encoding getdup 105 /i putpop%ADOEndSubsetFont
/IIWUFB+LMRoman10-Bold*1 [58{/.notdef}rp /colon 14{/.notdef}rp /I 8{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]IIWUFB+LMRoman10-Bold nfIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 192.194 mo(if)[3.18305 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf39.476 192.194 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.351 192.194 mo(category)[4.3118 5.2683 3.59443 4.64062 5.10886 4.82987 4.77014 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf83.884 192.194 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf96.614 192.194 mo(document)[5.18558 4.82887 4.3118 5.70366 8.74722 4.63861 5.97961 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf139.607 192.194 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf146.249 192.194 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf155.658 192.194 mo(Occurrence)[7.87843 4.3118 4.3118 5.70663 4.76018 4.77013 4.64063 5.97562 4.3118 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf210.293 192.194 mo(then)[4.45532 6.36819 5.2522 0 ]xsh33.523 205.743 mo
33.523 195.78 li
@
IIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.685 203.252 mo(Links)[6.78054 3.43313 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf72.815 203.252 mo(")shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf85.545 203.252 mo(Links)[6.78055 3.43312 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf114.121 203.252 mo($)shIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf122.977 203.252 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf126.851 203.252 mo(category,document)[4.3118 5.2663 3.59743 4.63861 5.11087 4.82887 4.77412 5.2334 4.43137 5.18558 4.82889 4.3118 5.70366 8.74721 4.63864 5.97961 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf212.038 203.252 mo(\))shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 215.207 mo(end)[5.25121 6.36717 0 ]xsh%ADOBeginSubsetFont: PAAAAA+LMRoman7-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.systemdict beginIIWUFJ+LMRoman7-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B08A95E08049111C98D69514864621E7BA30C96F006D46B9EB9F5A60318C8675E19A2A57A7D56CB113174E23EEE371E4A6E44AF060D05A72DAC1E3C9F96A5A18CA11091E6AE5943C7097E88F9443A557F637EBCBE8714730703D51038E328E63F25A33AD35081CC8F09A9BDA85F32C194AA120E9C5B3BE0E737523633156170DD610D6214B> |-systemdict /gcheck known {setglobal} if end {end} ifendIIWUFJ+LMRoman7-Bold /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/IIWUFJ+LMRoman7-Bold*1 [49{/.notdef}rp /one /two 205{/.notdef}rp]IIWUFJ+LMRoman7-Bold nfIIWUFJ+LMRoman7-Bold*1 [6.9738 0 0 -6.9738 0 0 ]msf3.904 227.163 mo(2)shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 227.163 mo(if)[3.18305 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf39.476 227.163 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.351 227.163 mo(category)[4.3118 5.2683 3.59443 4.64062 5.10886 4.82987 4.77014 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf83.884 227.163 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf96.614 227.163 mo(codeGroup)[4.3118 4.82988 5.18857 4.64061 7.83852 4.77014 4.82986 5.70665 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf143.728 227.163 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf150.37 227.163 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf159.779 227.163 mo(CodeGroup)[7.83754 4.82887 5.18758 4.63962 7.83752 4.75919 4.82886 5.70566 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf213.736 227.163 mo(then)[4.45532 6.36819 5.2522 0 ]xsh33.523 240.712 mo
33.523 230.749 li
@
IIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.685 238.221 mo(Links)[6.78054 3.43313 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf72.815 238.221 mo(")shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf85.545 238.221 mo(Links)[6.78055 3.43312 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf114.121 238.221 mo($)shIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf122.977 238.221 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf126.851 238.221 mo(category,codeGroup)[4.3118 5.2683 3.59442 4.64063 5.10887 4.82986 4.77014 5.23839 4.43137 4.3118 4.82986 5.18857 4.64063 7.83853 4.77011 4.8299 5.70663 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf216.159 238.221 mo(\))shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 250.176 mo(end)[5.25121 6.36717 0 ]xsh13 263.128 mo(end)[5.25121 6.36717 0 ]xsh13 279.372 mo(fore)sh32.1988 279.372 mo(ach)[5.56915 4.7731 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf52.266 279.372 mo(document)[5.18558 4.82888 4.3118 5.70364 8.74722 4.63863 5.97961 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf98.027 279.372 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf107.436 279.372 mo(Documents)[8.52702 4.82887 4.3118 5.70366 8.74721 4.63863 5.97961 3.59743 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf161.759 279.372 mo(do)[6.36517 0 ]xsh18.181 317.928 mo
18.181 282.959 li
@
%ADOBeginSubsetFont: PAAAAA+LMRoman7-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.systemdict beginIIWUFJ+LMRoman7-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B08A95E08049111C98AA316A1ECC81A96F3C2FD5B58EF74924EC2FCE40D7ECA85CCA38704414B7816BA1B1D59833F55D70DCD5E682CDAC7BEBE2CD44AE02F157C592F779DE2C7C7CF588FDAA8FE5FF2A8C73981FCD92ADC8BA63DE1364E1A9150AAD15B89F706B2F5A857B9459D1F975872636A12A2E329F5808E837EF2CBB2C11F8B918D395DC9ED942A319A82114B4624BAB049FD77075F56D8141C135638F5EF931501D485B8533D13F75B873A9A3441B54A2B099E3F170A6260DAC93F36CDC2B400917042F64CF142DE1F572A4FE9CD0BC4B2764C9A5> |-systemdict /gcheck known {setglobal} if end {end} ifendIIWUFJ+LMRoman7-Bold /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/IIWUFJ+LMRoman7-Bold*1 [49{/.notdef}rp /one /two /three 204{/.notdef}rp]IIWUFJ+LMRoman7-Bold nfIIWUFJ+LMRoman7-Bold*1 [6.9738 0 0 -6.9738 0 0 ]msf3.904 291.328 mo(3)shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 291.328 mo(if)[3.18305 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf39.476 291.328 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.351 291.328 mo(document)[5.18558 4.82887 4.31181 5.70365 8.74722 4.63861 5.97961 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf89.111 291.328 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf101.841 291.328 mo(docGroup)[5.18558 4.82689 4.30881 7.83554 4.7771 4.82689 5.70364 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf144.316 291.328 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf150.958 291.328 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf160.367 291.328 mo(DocGroup)[8.52702 4.83087 4.31279 7.82956 4.76117 4.84084 5.69768 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf209.503 291.328 mo(then)[4.45532 6.36819 5.2522 0 ]xsh33.523 304.877 mo
33.523 294.914 li
@
IIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.685 302.386 mo(Links)[6.78054 3.43313 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf72.815 302.386 mo(")shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf85.545 302.386 mo(Links)[6.78055 3.43312 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf114.121 302.386 mo($)shIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf122.977 302.386 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf126.851 302.386 mo(document,docGroup)[5.18558 4.82887 4.3118 5.70366 8.74722 4.63861 5.97961 3.59743 4.43137 5.18558 4.82887 4.3118 7.83354 4.76416 4.82889 5.70364 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf216.747 302.386 mo(\))shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 314.341 mo(end)[5.25121 6.36717 0 ]xsh13 327.293 mo(end)[5.25121 6.36717 0 ]xsh13 343.537 mo(fore)sh32.1988 343.537 mo(ach)[5.56915 4.7731 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf52.266 343.537 mo(category)[4.3118 5.2683 3.59443 4.64061 5.10887 4.82988 4.77013 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf92.8 343.537 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf102.209 343.537 mo(Categories)[7.83754 5.2673 3.59343 4.63962 5.09792 4.82887 4.76913 3.43413 4.63962 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf154.316 343.537 mo(do)[6.36517 0 ]xsh18.181 433.306 mo
18.181 347.124 li
@
%ADOBeginSubsetFont: PAAAAA+LMRoman7-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.systemdict beginIIWUFJ+LMRoman7-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B08A95E08049111C98D6A1B7C4C862F7F6758739A975733C7611BB37A0FE3F5461CFDA94E6DA82635B65038D913A63DF9437054BC58E6AC5954732FB9389D12C8A6C93A36753BF367C35B96012937F7B33D548E616712796AD1355FD345E64E9F7FD4682F8CFE19EFE67A4F83C15473563> |-systemdict /gcheck known {setglobal} if end {end} ifendIIWUFJ+LMRoman7-Bold /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/IIWUFJ+LMRoman7-Bold*1 [49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]IIWUFJ+LMRoman7-Bold nfIIWUFJ+LMRoman7-Bold*1 [6.9738 0 0 -6.9738 0 0 ]msf3.904 355.492 mo(4)shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 355.492 mo(if)[3.18305 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf39.476 355.492 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.351 355.492 mo(category)[4.3118 5.2683 3.59443 4.64062 5.10886 4.82987 4.77014 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf83.884 355.492 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf96.614 355.492 mo(document)[5.18558 4.82887 4.3118 5.70366 8.74722 4.63861 5.97961 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf139.607 355.492 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf146.249 355.492 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf155.658 355.492 mo(Occurrence)[7.87843 4.3118 4.3118 5.70663 4.76018 4.77013 4.64063 5.97562 4.3118 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf210.536 355.492 mo(and)[5.56915 6.36517 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf232.4 355.492 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf236.275 355.492 mo(document)[5.18558 4.82889 4.3118 5.70364 8.74722 4.63861 5.97961 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf282.035 355.492 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf294.765 355.492 mo(docGroup)[5.18558 4.82687 4.30881 7.83554 4.77713 4.82687 5.70364 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf337.24 355.492 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf343.882 355.492 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf353.291 355.492 mo(DocGroup)[8.52701 4.83087 4.31281 7.82956 4.76117 4.83087 5.70764 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf402.427 355.492 mo(then)[4.45532 6.36819 5.2522 0 ]xsh33.523 369.042 mo
33.523 359.079 li
@
IIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.685 366.551 mo(Links)[6.78054 3.43313 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf72.815 366.551 mo(")shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf85.545 366.551 mo(Links)[6.78055 3.43312 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf114.121 366.551 mo($)shIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf122.977 366.551 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf126.851 366.551 mo(category,docGroup)[4.3118 5.2683 3.59442 4.64063 5.10887 4.82986 4.77014 5.23839 4.43137 5.18855 4.82988 4.3118 7.83853 4.77014 4.82986 5.70667 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf211.52 366.551 mo(\))shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 378.506 mo(end)[5.25121 6.36717 0 ]xsh%ADOBeginSubsetFont: PAAAAA+LMRoman7-Bold AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.systemdict beginIIWUFJ+LMRoman7-Bold dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B08A95E08049111C98A5E04D1A781B0F31DF87FDD41E82E6880FFE5D88219B159F36F33ABC6C174265BAAE0C426193D3E843AB4823EC29CA19D8F6B9FDCEFFAC543FF443A4CD0C2B88A46B0D7548014D0C92C0BC0E0E4F0B5FCBC7617841D3F9B8409D1EF2972788534212289CC4101201D68C8BBF5DFEDCA0B09BBDB327FBC4BA150E6E26A092AEFEED00FA066595CFCB1EB2A6B1C2F2781A3EBD62B635B4B9AFCC4333456D25775D1FA66E77B5B6DCB79832E25315592D1BA2382D653EB595DBB8A0A74605643F27C25C32F056D95E32913E8D6FA1159D1D9C1DDDBB8BACC53A6E3B55AE8B34565EE376E7F410> |-systemdict /gcheck known {setglobal} if end {end} ifendIIWUFJ+LMRoman7-Bold /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/IIWUFJ+LMRoman7-Bold*1 [49{/.notdef}rp /one /two /three /four /five 202{/.notdef}rp]IIWUFJ+LMRoman7-Bold nfIIWUFJ+LMRoman7-Bold*1 [6.9738 0 0 -6.9738 0 0 ]msf3.904 394.751 mo(5)shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 394.751 mo(if)[3.18305 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf39.476 394.751 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.351 394.751 mo(category)[4.3118 5.2683 3.59443 4.64062 5.10886 4.82987 4.77014 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf83.884 394.751 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf96.614 394.751 mo(document)[5.18558 4.82887 4.3118 5.70366 8.74722 4.63861 5.97961 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf139.607 394.751 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf146.249 394.751 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf155.658 394.751 mo(Occurrence)[7.87843 4.3118 4.3118 5.70663 4.76018 4.77013 4.64063 5.97562 4.3118 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf210.536 394.751 mo(and)[5.56915 6.36517 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf232.4 394.751 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf236.275 394.751 mo(document)[5.18558 4.82889 4.3118 5.70364 8.74722 4.63861 5.97961 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf282.035 394.751 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf294.765 394.751 mo(docGroup)[5.18558 4.82687 4.30881 7.83554 4.77713 4.82687 5.70364 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf337.24 394.751 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf343.882 394.751 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf353.291 394.751 mo(DocGroup)[8.52701 4.83087 4.31281 7.82956 4.76117 4.83087 5.70764 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf402.67 394.751 mo(and)[5.56915 6.36517 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf33.324 406.706 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf37.198 406.706 mo(category)[4.3118 5.2683 3.59443 4.64062 5.10886 4.82987 4.77014 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf77.731 406.706 mo( !)[0 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf90.461 406.706 mo(codeGroup)[4.3118 4.82988 5.18857 4.64061 7.83853 4.77013 4.82988 5.70663 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf137.576 406.706 mo(\))shIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf144.217 406.706 mo(&)shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf153.626 406.706 mo(CodeGroup)[7.83754 4.82887 5.18758 4.63962 7.83752 4.75917 4.82889 5.70563 0 ]xshIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf207.583 406.706 mo(then)[4.45532 6.36819 5.2522 0 ]xsh33.523 420.255 mo
33.523 410.292 li
@
IIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf43.685 417.765 mo(Links)[6.78054 3.43313 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf72.815 417.765 mo(")shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf85.545 417.765 mo(Links)[6.78055 3.43312 5.9836 5.49533 0 ]xshIIWUFI+LMMathSymbols10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf114.121 417.765 mo($)shIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf122.977 417.765 mo(\()shIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf126.851 417.765 mo(codeGroup,docGroup)[4.3118 4.82988 5.18857 4.64061 7.83852 4.77014 4.82986 5.70665 5.00926 4.42139 5.18857 4.82988 4.31181 7.83853 4.77011 4.82986 5.70667 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf220.869 417.765 mo(\))shIIWUFB+LMRoman10-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf28.342 429.72 mo(end)[5.25121 6.36717 0 ]xsh13 442.671 mo(end)[5.25121 6.36717 0 ]xsh13 458.916 mo(return)[4.71828 5.2562 4.45932 6.3622 4.71828 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf48.233 458.916 mo(G)shIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf58.834 458.916 mo(=\()[10.5185 0 ]xshIIWUFD+LMMathItalic10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf73.224 458.916 mo(Nodes,Links)[9.09081 4.82689 5.18558 4.63762 4.66742 4.42838 6.77956 3.43213 5.98259 5.49434 0 ]xshIIWUFE+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf132.429 458.916 mo(\))sh%ADOBeginSubsetFont: IAAAAA+LMRoman10-Regular AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.systemdict beginIIWUFC+LMRoman10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C148F4BC66BEA336016E6CFEFD4BA4B0536DC4C35B3445EC8CE417C307043DDF5430138211E400B9A0B852323AB802C8A457DC8CA719AA84D3B2036E5A3E698ADE0543357E1337D> |-systemdict /gcheck known {setglobal} if end {end} ifendIIWUFC+LMRoman10-Regular /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/IIWUFC+LMRoman10-Regular*1 [44{/.notdef}rp /comma 4{/.notdef}rp /one 8{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /D 2{/.notdef}rp /G 12{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w 136{/.notdef}rp]IIWUFC+LMRoman10-Regular nfIIWUFC+LMRoman10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf244.509 679.888 mo(1)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/IIWUFI+LMMathSymbols10-Regular*1 uf/IIWUFI+LMMathSymbols10-Regular uf/OAAAAA+LMMathSymbols10-Regular uf/IIWUFE+LMRoman10-Regular*1 uf/IIWUFE+LMRoman10-Regular uf/KAAAAA+LMRoman10-Regular uf/IIWUFD+LMMathItalic10-Regular*1 uf/IIWUFD+LMMathItalic10-Regular uf/JAAAAA+LMMathItalic10-Regular uf/IIWUFG+LMRoman7-Regular*1 uf/IIWUFG+LMRoman7-Regular uf/MAAAAA+LMRoman7-Regular uf/IIWUFF+LMMathSymbols10-Regular*1 uf/IIWUFF+LMMathSymbols10-Regular uf/LAAAAA+LMMathSymbols10-Regular uf/IIWUFB+LMRoman10-Bold*1 uf/IIWUFB+LMRoman10-Bold uf/HAAAAA+LMRoman10-Bold uf/IIWUFC+LMRoman10-Regular*1 uf/IIWUFC+LMRoman10-Regular uf/IAAAAA+LMRoman10-Regular uf/IIWUFJ+LMRoman7-Bold*1 uf/IIWUFJ+LMRoman7-Bold uf/PAAAAA+LMRoman7-Bold uf/IIWUFH+LMMathItalic7-Regular*1 uf/IIWUFH+LMMathItalic7-Regular uf/NAAAAA+LMMathItalic7-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
